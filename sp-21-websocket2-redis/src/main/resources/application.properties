server.port=8021

spring.application.name="springboot-websocket"

server.servlet.context-path=/websocket



# 数据库配置
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&serverTimezone=Asia/Shanghai
spring.datasource.username = root
spring.datasource.password = 123456

# 初始化连接数
spring.datasource.druid.initial-size = 5
# 最小连接数
spring.datasource.druid.min-idle = 5
# 最大连接数
spring.datasource.druid.max-active = 20
# 获取连接等待超时的时间
spring.datasource.druid.max-wait = 3000
# 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒
spring.datasource.druid.time-between-eviction-runs-millis = 60000
# 一个连接在池中最小生存时间
spring.datasource.druid.min-evictable-idle-time-millis = 300000
# 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.druid.validation-query = SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow = false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.test-on-return = false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements = false
#是否生产库
spring.datasource.prod = false






# redis缓存配置
# redis ip
spring.redis.host = 127.0.0.1
# redis数据库
spring.redis.database = 0
# redis端口
spring.redis.port = 6379
# redis密码
spring.redis.password =
# redis连接超时时间（单位：毫秒）
spring.redis.timeout = 3000
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active = 8
# 连接池中的最大空闲连接
spring.redis.jedis.pool.min-idle = 8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.max-idle = 0
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait = -1




